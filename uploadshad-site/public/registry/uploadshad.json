{
  "name": "uploadshad",
  "type": "registry:component",
  "dependencies": [
    "zod",
    "uuid",
    "sonner",
    "react-dropzone",
    "@hello-pangea/dnd",
    "@aws-sdk/client-s3",
    "@aws-sdk/s3-request-presigner"
  ],
  "devDependencies": [
    "@types/uuid"
  ],
  "registryDependencies": [
    "card",
    "button",
    "scroll-area",
    "aspect-ratio",
    "http://localhost:3000/registry/uploadshad-hooks.json",
    "http://localhost:3000/registry/uploadshad-utils.json",
    "http://localhost:3000/registry/uploadshad-api.json"
  ],
  "files": [
    {
      "path": "component/uploadshad/uploadshad.tsx",
      "content": "import React from \"react\";\r\nimport { FilesContextProvider } from \"./hooks/files-context\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nexport interface UploadShadProps extends React.InputHTMLAttributes<HTMLInputElement> {\r\n  folderId?: string;\r\n  defaultValues?: string[];\r\n  handleChange?: (files: string[]) => void;\r\n  metadata?: Record<string, string> | undefined;\r\n}\r\n\r\nexport const UploadShad = React.forwardRef<HTMLInputElement, UploadShadProps>(\r\n  (\r\n    { className, type, defaultValues, children, folderId, metadata, handleChange, ...props },\r\n    ref\r\n  ) => {\r\n    return (\r\n      <FilesContextProvider\r\n        folderId={folderId}\r\n        metadata={metadata}\r\n        defaultValues={defaultValues}\r\n        onChange={handleChange}\r\n      >\r\n        <div\r\n          className={cn(\"w-full flex justify-center items-center mr-10 gap-10 flex-col\", className)}\r\n        >\r\n          {children}\r\n        </div>\r\n      </FilesContextProvider>\r\n    );\r\n  }\r\n);\r\nUploadShad.displayName = \"ImagesInput\";\r\n",
      "type": "registry:component",
      "target": "components/uploadshad/uploadshad.tsx"
    },
    {
      "path": "component/uploadshad/files-preview.tsx",
      "content": "import { CardContent } from \"@/components/ui/card\";\r\nimport { PropsWithChildren, useMemo } from \"react\";\r\nimport { EmptyCard } from \"@/registry/component/uploadshad/emptycard\";\r\nimport Image, { ImageLoaderProps } from \"next/image\";\r\nimport { Trash2 } from \"lucide-react\";\r\nimport { AspectRatio } from \"@/components/ui/aspect-ratio\";\r\nimport { useFilesContext } from \"./hooks\";\r\nimport {\r\n  DragDropContext,\r\n  Draggable,\r\n  DraggableProvided,\r\n  Droppable,\r\n  DropResult,\r\n} from \"@hello-pangea/dnd\";\r\nimport { toast } from \"sonner\";\r\n\r\ntype FilesPreviewProps = PropsWithChildren & {\r\n  customLoader?: (props: ImageLoaderProps) => string;\r\n};\r\n\r\nexport default function FilesPreview({ children, customLoader }: FilesPreviewProps) {\r\n  const { files, handleDelete, handleReOrder } = useFilesContext();\r\n\r\n  const handleDragDrop = (result: DropResult) => {\r\n    if (!result.destination) return;\r\n    handleReOrder(result.source.index, result.destination.index);\r\n  };\r\n\r\n  const renderFiles = useMemo(() => {\r\n    // console.log(\"UploadShad Tracking: Preview View - Rendering files: \", files);\r\n    if (files.length > 0) {\r\n      return files.map((file: string, index) => (\r\n        <Draggable draggableId={index.toString()} key={index} index={index}>\r\n          {(provided) => (\r\n            <FilesPreviewPreviewCard\r\n              key={index}\r\n              fileUrl={file}\r\n              provided={provided}\r\n              customLoader={customLoader}\r\n              onDelete={() => {\r\n                toast.promise(handleDelete(file), {\r\n                  loading: \"Deleting File...\",\r\n                  success: () => {\r\n                    return `File deleted successfully`;\r\n                  },\r\n                  error: `Oops, something happened. Please try again.`,\r\n                });\r\n              }}\r\n            />\r\n          )}\r\n        </Draggable>\r\n      ));\r\n    } else {\r\n      return (\r\n        <EmptyCard\r\n          title=\"No files uploaded\"\r\n          description=\"Upload some files to see them here\"\r\n          className=\"w-full\"\r\n        />\r\n      );\r\n    }\r\n  }, [files, handleDelete, customLoader]);\r\n\r\n  return (\r\n    <div className=\"flex justify-center items-start flex-col w-full gap-5 \">\r\n      {/* Head */}\r\n      {children}\r\n      <CardContent className=\"p-0 w-full\">\r\n        <div className=\"w-full\">\r\n          {/* <div className=\"flex h-full gap-2 flex-wrap overflow-hidden\">{renderFiles}</div> */}\r\n          {/* Render out Sortable Items, passing in the Card to render */}\r\n          <DragDropContext onDragEnd={handleDragDrop}>\r\n            <Droppable droppableId=\"droppable-1\" direction={\"vertical\"} type=\"group\">\r\n              {(provided) => (\r\n                <div\r\n                  className=\"grid gap-3  w-full\"\r\n                  {...provided.droppableProps}\r\n                  ref={provided.innerRef}\r\n                >\r\n                  {renderFiles}\r\n                  {provided.placeholder}\r\n                </div>\r\n              )}\r\n            </Droppable>\r\n          </DragDropContext>\r\n        </div>\r\n      </CardContent>\r\n    </div>\r\n  );\r\n}\r\n\r\nFilesPreview.Head = function FilesPreviewHead({ children }: PropsWithChildren) {\r\n  return (\r\n    <div className=\"flex justify-center items-start w-full flex-col text-start\">{children}</div>\r\n  );\r\n};\r\n\r\nfunction FilesPreviewPreviewCard({\r\n  fileUrl,\r\n  onDelete,\r\n  children,\r\n  provided,\r\n  customLoader,\r\n}: PropsWithChildren & {\r\n  fileUrl: string;\r\n  onDelete: () => void;\r\n  provided: DraggableProvided;\r\n  customLoader?: (props: ImageLoaderProps) => string;\r\n}) {\r\n  return (\r\n    <div\r\n      className=\"flex flex-col items-end justify-start w-full border\"\r\n      {...provided.dragHandleProps}\r\n      {...provided.draggableProps}\r\n      ref={provided.innerRef}\r\n    >\r\n      <AspectRatio ratio={4 / 3}>\r\n        <Image\r\n          src={fileUrl}\r\n          alt={`image 1`}\r\n          fill\r\n          quality={35}\r\n          loader={customLoader}\r\n          className=\"rounded-md object-cover\"\r\n        />\r\n      </AspectRatio>\r\n      <div className=\"absolute flex flex-col items-center justify-center pt-1 pr-1 gap-1\">\r\n        <div\r\n          onClick={onDelete}\r\n          style={{ background: \"white\" }}\r\n          className=\"flex h-8 w-8 shadow-lg cursor-pointer items-center justify-center rounded-full border hover:text-red-500 bg-white bg-opacity-70 \"\r\n        >\r\n          <Trash2 size={18} className=\"hover:text-red-500\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/uploadshad/files-preview.tsx"
    },
    {
      "path": "component/uploadshad/emptycard.tsx",
      "content": "import { ImageIcon } from \"@radix-ui/react-icons\";\r\n\r\nimport { Card, CardDescription, CardTitle } from \"@/components/ui/card\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ninterface EmptyCardProps extends React.ComponentPropsWithoutRef<typeof Card> {\r\n  title: string;\r\n  description?: string;\r\n  action?: React.ReactNode;\r\n  icon?: React.ComponentType<{ className?: string }>;\r\n}\r\n\r\nexport function EmptyCard({\r\n  title,\r\n  description,\r\n  icon: Icon = ImageIcon,\r\n  action,\r\n  className,\r\n  ...props\r\n}: EmptyCardProps) {\r\n  return (\r\n    <Card\r\n      className={cn(\r\n        \"flex w-full flex-col items-center justify-center space-y-6 bg-transparent p-16\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      <div className=\"mr-4 shrink-0 rounded-full border border-dashed p-4\">\r\n        <Icon className=\"size-8 text-muted-foreground\" aria-hidden=\"true\" />\r\n      </div>\r\n      <div className=\"flex flex-col items-center gap-1.5 text-center\">\r\n        <CardTitle>{title}</CardTitle>\r\n        {description ? <CardDescription>{description}</CardDescription> : null}\r\n      </div>\r\n      {action ? action : null}\r\n    </Card>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/uploadshad/emptycard.tsx"
    },
    {
      "path": "component/uploadshad/file-input.tsx",
      "content": "\"use client\";\r\n\r\nimport { toast } from \"sonner\";\r\nimport * as React from \"react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { UploadIcon, X } from \"lucide-react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport Image, { ImageLoaderProps } from \"next/image\";\r\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\r\nimport { formatBytes } from \"@/registry/component/uploadshad/utils\";\r\nimport Dropzone, { type DropzoneProps, type FileRejection } from \"react-dropzone\";\r\nimport { handleRejectedFiles, useFilesContext, useControllableState } from \"./hooks\";\r\n\r\nexport interface FileInputProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  /**\r\n   * Value of the uploader.\r\n   * @type File[]\r\n   * @default undefined\r\n   * @example value={files}\r\n   */\r\n  value?: File[];\r\n\r\n  /**\r\n   * Function to be called when the value changes.\r\n   * @type React.Dispatch<React.SetStateAction<File[]>>\r\n   * @default undefined\r\n   * @example onValueChange={(files) => setFiles(files)}\r\n   */\r\n  onValueChange?: React.Dispatch<React.SetStateAction<File[]>>;\r\n\r\n  /**\r\n   * Accepted file types for the uploader.\r\n   * @type { [key: string]: string[]}\r\n   * @default\r\n   * ```ts\r\n   * { \"image/*\": [] }\r\n   * ```\r\n   * @example accept={[\"image/png\", \"image/jpeg\"]}\r\n   */\r\n  accept?: DropzoneProps[\"accept\"];\r\n\r\n  /**\r\n   * Maximum file size for the uploader.\r\n   * @type number | undefined\r\n   * @default 1024 * 1024 * 2 // 2MB\r\n   * @example maxsize={1024 * 1024 * 2} // 2MB\r\n   */\r\n  maxsize?: DropzoneProps[\"maxSize\"];\r\n\r\n  /**\r\n   * Maximum number of files for the uploader.\r\n   * @type number | undefined\r\n   * @default 1\r\n   * @example maxfiles={5}\r\n   */\r\n  maxfiles?: DropzoneProps[\"maxFiles\"];\r\n\r\n  /**\r\n   * Whether the uploader is disabled.\r\n   * @type boolean\r\n   * @default false\r\n   * @example disabled\r\n   */\r\n  disabled?: boolean;\r\n\r\n  customLoader?: (props: ImageLoaderProps) => string;\r\n}\r\n\r\ninterface FileCardProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  file: File;\r\n  onRemove: () => void;\r\n  customLoader?: (props: ImageLoaderProps) => string;\r\n}\r\n\r\nconst FileInput = React.forwardRef<HTMLInputElement, FileInputProps>((props, ref) => {\r\n  const {\r\n    className,\r\n    maxfiles = 1,\r\n    customLoader,\r\n    onValueChange,\r\n    value: valueProp,\r\n    disabled = false,\r\n    maxsize = 1024 * 1024 * 2,\r\n    accept = { \"image/*\": [] },\r\n    ...dropzoneProps\r\n  } = props;\r\n\r\n  // Upload Context state\r\n  // const { uploadedFiles, handleInput } = useContext(UploadContext) as UploadContextType;\r\n  const { files: uploadedFiles, handleInput } = useFilesContext();\r\n\r\n  const [files, setFiles] = useControllableState({\r\n    prop: valueProp,\r\n    onChange: onValueChange,\r\n  });\r\n\r\n  const onDrop = React.useCallback(\r\n    (acceptedFiles: File[], rejectedFiles: FileRejection[]) => {\r\n      // Display toasts for rejected files\r\n      handleRejectedFiles(rejectedFiles, maxsize ?? 0);\r\n\r\n      const newFiles = acceptedFiles.map((file) =>\r\n        Object.assign(file, {\r\n          preview: URL.createObjectURL(file),\r\n        })\r\n      );\r\n      const updatedFiles = files ? [...files, ...newFiles] : newFiles;\r\n\r\n      // Validate the Total Number of Files inputed & the current number of uploaded files is less than maxfiles allowed (Assumes maxfiles is defined)\r\n      if (uploadedFiles.length + updatedFiles.length > maxfiles) {\r\n        toast.error(\"Oops, you can't do that.\", {\r\n          description: `Cannot upload more than ${maxfiles} files`,\r\n          duration: 10000,\r\n        });\r\n        return;\r\n      }\r\n\r\n      setFiles(updatedFiles);\r\n\r\n      console.log(\"UploadShad Tracking: InputView - Validated File Input(s)\");\r\n      const target = updatedFiles.length > 0 ? `${updatedFiles.length} files` : `file`;\r\n      toast.promise(handleInput(updatedFiles), {\r\n        loading: `Uploading ${target}...`,\r\n        success: () => {\r\n          setFiles([]);\r\n          return `${target} uploaded`;\r\n        },\r\n        error: `Failed to upload ${target}`,\r\n      });\r\n    },\r\n\r\n    [files, maxfiles, maxsize, handleInput, setFiles, uploadedFiles.length]\r\n  );\r\n\r\n  function onRemove(index: number) {\r\n    if (!files) return;\r\n    const newFiles = files.filter((_, i) => i !== index);\r\n    setFiles(newFiles);\r\n    onValueChange?.(newFiles);\r\n  }\r\n\r\n  // Revoke preview url when component unmounts\r\n  React.useEffect(() => {\r\n    return () => {\r\n      if (!files) return;\r\n      files.forEach((file) => {\r\n        if (isFileWithPreview(file)) {\r\n          URL.revokeObjectURL(file.preview);\r\n        }\r\n      });\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const isDisabled = disabled || (uploadedFiles?.length ?? 0) >= maxfiles;\r\n\r\n  return (\r\n    <div className=\"relative flex flex-col w-full gap-6 overflow-hidden\">\r\n      <Dropzone\r\n        onDrop={onDrop}\r\n        accept={accept}\r\n        maxSize={maxsize}\r\n        maxFiles={maxfiles}\r\n        multiple={maxfiles > 1}\r\n        disabled={isDisabled}\r\n      >\r\n        {({ getRootProps, getInputProps, isDragActive }) => (\r\n          <div\r\n            {...getRootProps()}\r\n            className={cn(\r\n              \"group relative grid h-52 w-full cursor-pointer place-items-center rounded-lg border-2 border-dashed border-muted-foreground/25 px-5 py-2.5 text-center transition hover:bg-muted/25\",\r\n              \"ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\r\n              isDragActive && \"border-muted-foreground/50\",\r\n              isDisabled && \"pointer-events-none opacity-60\",\r\n              className\r\n            )}\r\n            {...dropzoneProps}\r\n          >\r\n            <input {...getInputProps()} />\r\n            <div\r\n              ref={ref}\r\n              {...props}\r\n              className=\"flex flex-col items-center justify-center gap-4 sm:px-5\"\r\n            >\r\n              <div className=\"rounded-full border border-dashed p-3\">\r\n                <UploadIcon className=\"size-7 text-muted-foreground\" aria-hidden=\"true\" />\r\n              </div>\r\n              {/* Extract with Children for custom rendering options */}\r\n              {isDragActive ? (\r\n                <FileInputActiveContent>\r\n                  <p className=\"font-medium text-muted-foreground\">Drop the files here</p>\r\n                </FileInputActiveContent>\r\n              ) : (\r\n                <FileInputContent>\r\n                  <p className=\"font-medium text-muted-foreground\">\r\n                    Drag &apos;n drop files here, or click to select files\r\n                  </p>\r\n                  <p className=\"text-sm text-muted-foreground/70\">\r\n                    You can upload\r\n                    {maxfiles > 1\r\n                      ? ` ${maxfiles === Infinity ? \"multiple\" : maxfiles}\r\n                        files (up to ${formatBytes(maxsize)} each)`\r\n                      : ` a file with ${formatBytes(maxsize)}`}\r\n                  </p>\r\n                </FileInputContent>\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Dropzone>\r\n      {files?.length ? (\r\n        <ScrollArea className=\"h-fit w-full px-3\">\r\n          <div className=\"max-h-48 space-y-4\">\r\n            {files?.map((file, index) => (\r\n              <FileInputCard\r\n                key={index}\r\n                file={file}\r\n                onRemove={() => onRemove(index)}\r\n                customLoader={customLoader}\r\n              />\r\n            ))}\r\n          </div>\r\n        </ScrollArea>\r\n      ) : null}\r\n    </div>\r\n  );\r\n});\r\nFileInput.displayName = \"FileInput\";\r\n\r\nconst FileInputCard = React.forwardRef<HTMLDivElement, FileCardProps>(\r\n  ({ className, file, onRemove, customLoader, ...props }, ref) => {\r\n    return (\r\n      <div className=\"relative flex items-center space-x-4\" {...props} ref={ref}>\r\n        <div className=\"flex flex-1 space-x-4\">\r\n          {isFileWithPreview(file) ? (\r\n            <Image\r\n              src={file.preview}\r\n              alt={file.name}\r\n              loader={customLoader}\r\n              quality={30}\r\n              width={48}\r\n              height={48}\r\n              loading=\"lazy\"\r\n              className=\"aspect-square shrink-0 rounded-md object-cover\"\r\n            />\r\n          ) : null}\r\n          <div className=\"flex w-full flex-col gap-2\">\r\n            <div className=\"space-y-px\">\r\n              <p className=\"line-clamp-1 text-sm font-medium text-foreground/80\">{file.name}</p>\r\n              <p className=\"text-xs text-muted-foreground\">{formatBytes(file.size)}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"flex items-center gap-2\">\r\n          <Button type=\"button\" variant=\"outline\" size=\"icon\" className=\"size-7\" onClick={onRemove}>\r\n            <X className=\"size-4 \" aria-hidden=\"true\" />\r\n            <span className=\"sr-only\">Remove file</span>\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\nFileInputCard.displayName = \"UploadShad.FileInput.FileInputCard\";\r\n\r\nconst FileInputActiveContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, children, ...props }, ref) => {\r\n  return (\r\n    <div className=\"flex justify-center items-center gap-3 flex-col\" ref={ref} {...props}>\r\n      {children}\r\n    </div>\r\n  );\r\n});\r\nFileInputActiveContent.displayName = \"UploadShad.FileInput.FileInputActiveContent\";\r\n\r\nconst FileInputContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\r\n  ({ className, children, ...props }, ref) => {\r\n    return (\r\n      <div className=\"flex justify-center items-center gap-3 flex-col\" ref={ref} {...props}>\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n);\r\nFileInputContent.displayName = \"UploadShad.FileInput.FileInputContent\";\r\n\r\nfunction isFileWithPreview(file: File): file is File & { preview: string } {\r\n  return \"preview\" in file && typeof file.preview === \"string\";\r\n}\r\n\r\nexport { FileInput, FileInputContent, FileInputActiveContent };\r\n",
      "type": "registry:component",
      "target": "components/uploadshad/file-input.tsx"
    },
    {
      "path": "component/uploadshad/actions.ts",
      "content": "\"use server\";\r\n\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\r\nimport { S3Client, PutObjectCommand, DeleteObjectCommand } from \"@aws-sdk/client-s3\";\r\nimport { getServerVariables } from \"@/registry/component/uploadshad/utils\";\r\n\r\nconst {\r\n  AWS_BUCKET_ACCESS_KEY,\r\n  AWS_BUCKET_NAME,\r\n  AWS_BUCKET_SECRET_ACCESS_KEY,\r\n  AWS_BUCKET_REGION,\r\n  AWS_BUCKET_PRODUCTION_FOLDER,\r\n} = getServerVariables();\r\n\r\nconst s3Client = new S3Client({\r\n  region: AWS_BUCKET_REGION,\r\n  credentials: {\r\n    accessKeyId: AWS_BUCKET_ACCESS_KEY,\r\n    secretAccessKey: AWS_BUCKET_SECRET_ACCESS_KEY,\r\n  },\r\n});\r\n\r\n// Make this universal\r\n\r\ninterface filePayload {\r\n  type: string;\r\n  size: number;\r\n  checksum: string;\r\n  /**\r\n   * Example:  `<tagId>=<tagValue>`\r\n   */\r\n  tag?: string;\r\n  metaData?: Record<string, string> | undefined;\r\n}\r\n\r\ninterface AWSOptions {\r\n  acceptedTypes: string[];\r\n  maxFileSize: number;\r\n}\r\n\r\nexport async function getSignedURL(\r\n  { type, checksum, size, tag, metaData }: filePayload,\r\n  { acceptedTypes, maxFileSize }: AWSOptions\r\n) {\r\n  // Validate request\r\n  if (!acceptedTypes.includes(type)) {\r\n    return { failure: \"Not valid type\" };\r\n  }\r\n\r\n  if (size > maxFileSize) {\r\n    return { failure: \"File too large.\" };\r\n  }\r\n\r\n  const key = `${AWS_BUCKET_PRODUCTION_FOLDER}/${uuidv4()}`;\r\n\r\n  const command = new PutObjectCommand({\r\n    Key: key,\r\n    Tagging: tag,\r\n    ContentType: type,\r\n    Metadata: metaData,\r\n    ContentLength: size,\r\n    ChecksumSHA256: checksum,\r\n    Bucket: AWS_BUCKET_NAME,\r\n  });\r\n\r\n  const url = await getSignedUrl(s3Client, command, { expiresIn: 3600 });\r\n\r\n  return { signedURL: url };\r\n}\r\n\r\nexport async function deleteFile(key: string) {\r\n  const command = new DeleteObjectCommand({\r\n    Bucket: AWS_BUCKET_NAME,\r\n    Key: `${AWS_BUCKET_PRODUCTION_FOLDER}/${key}`,\r\n  });\r\n\r\n  try {\r\n    const response = await s3Client.send(command);\r\n    console.log(\"AWS Delete Response: \", response);\r\n    console.log(\"AWS Delete Response DeleteMarker: \", response.DeleteMarker);\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n}\r\n",
      "type": "registry:component",
      "target": "components/uploadshad/actions.ts"
    },
    {
      "path": "component/uploadshad/index.ts",
      "content": "import { FileInput, FileInputProps } from \"./file-input\";\r\nimport FilesPreview from \"./files-preview\";\r\nimport { S3Service } from \"./utils/s3service\";\r\nimport { UploadShad, UploadShadProps } from \"./uploadshad\";\r\n\r\nexport {\r\n  UploadShad,\r\n  type UploadShadProps,\r\n  FilesPreview,\r\n  FileInput,\r\n  S3Service,\r\n  type FileInputProps,\r\n};\r\n",
      "type": "registry:component",
      "target": "components/uploadshad/index.ts"
    }
  ]
}