{
  "name": "data-table",
  "type": "registry:component",
  "dependencies": [
    "@tanstack/react-table"
  ],
  "registryDependencies": [
    "table",
    "card",
    "skeleton",
    "card",
    "badge",
    "command",
    "popover",
    "separator",
    "input"
  ],
  "files": [
    {
      "path": "component/ndx/data-table/data-table.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useState } from \"react\";\r\nimport {\r\n  ColumnDef,\r\n  ColumnFiltersState,\r\n  flexRender,\r\n  getCoreRowModel,\r\n  getFacetedRowModel,\r\n  getFacetedUniqueValues,\r\n  getFilteredRowModel,\r\n  getPaginationRowModel,\r\n  getSortedRowModel,\r\n  InitialTableState,\r\n  SortingState,\r\n  useReactTable,\r\n  VisibilityState,\r\n} from \"@tanstack/react-table\";\r\nimport { AlertTriangleIcon } from \"lucide-react\";\r\n\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\";\r\n\r\nimport { Card, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Skeleton } from \"@/components/ui/skeleton\";\r\nimport { DataTablePagination } from \"@/registry/component/ndx/data-table/data-table-pagination\";\r\nimport { DataTableToolbar, Filter } from \"@/registry/component/ndx/data-table/data-table-tool-bar\";\r\n\r\n/**\r\n * Props for the DataTable component.\r\n * @template TData - The type of the data rows.\r\n * @template TValue - The type of the cell values.\r\n */\r\ninterface DataTableProps<TData, TValue> {\r\n  /**\r\n   * An array of column definitions.\r\n   */\r\n  columns: ColumnDef<TData, TValue>[];\r\n  /**\r\n   * An array of data rows.\r\n   */\r\n  data: TData[];\r\n  /**\r\n   * An optional object specifying the default visibility of columns.\r\n   */\r\n  defaultColumnVisibility?: VisibilityState;\r\n  /**\r\n   * An optional object to specify pagination settings. Only affects the initial table state.\r\n   */\r\n  initialState?: InitialTableState;\r\n  /**\r\n   * The name of the column to use for the search bar.\r\n   */\r\n  searchColumn?: string;\r\n  /**\r\n   * An array of filter objects to apply to the table.  Each object should specify the column to filter, the title of the filter, and an array of options.\r\n   */\r\n  filters?: Filter[];\r\n}\r\n\r\nexport default function DataTable<TData, TValue>({\r\n  columns,\r\n  data,\r\n  defaultColumnVisibility,\r\n  initialState,\r\n  searchColumn,\r\n  filters,\r\n}: DataTableProps<TData, TValue>) {\r\n  /** State for tracking selected rows. */\r\n  const [rowSelection, setRowSelection] = useState({});\r\n  /** State for tracking column visibility. */\r\n  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>(\r\n    defaultColumnVisibility || {}\r\n  );\r\n  /** State for tracking column filters. */\r\n  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);\r\n  /** State for tracking sorting. */\r\n  const [sorting, setSorting] = useState<SortingState>([]);\r\n\r\n  const table = useReactTable({\r\n    data,\r\n    columns,\r\n    initialState: initialState,\r\n    state: {\r\n      sorting,\r\n      columnVisibility,\r\n      rowSelection,\r\n      columnFilters,\r\n    },\r\n    enableRowSelection: true,\r\n    onRowSelectionChange: setRowSelection,\r\n    onSortingChange: setSorting,\r\n    onColumnFiltersChange: setColumnFilters,\r\n    onColumnVisibilityChange: setColumnVisibility,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getFilteredRowModel: getFilteredRowModel(),\r\n    getPaginationRowModel: getPaginationRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n    getFacetedRowModel: getFacetedRowModel(),\r\n    getFacetedUniqueValues: getFacetedUniqueValues(),\r\n  });\r\n\r\n  return (\r\n    <div className=\"space-y-4 pb-3 \">\r\n      <DataTableToolbar table={table} searchColumn={searchColumn} filters={filters} />\r\n      <div className=\"space-y-8 rounded-md border\">\r\n        <Table>\r\n          <TableHeader>\r\n            {table.getHeaderGroups().map((headerGroup) => (\r\n              <TableRow key={headerGroup.id}>\r\n                {headerGroup.headers.map((header) => {\r\n                  return (\r\n                    <TableHead key={header.id}>\r\n                      {header.isPlaceholder\r\n                        ? null\r\n                        : flexRender(header.column.columnDef.header, header.getContext())}\r\n                    </TableHead>\r\n                  );\r\n                })}\r\n              </TableRow>\r\n            ))}\r\n          </TableHeader>\r\n          <TableBody>\r\n            {table.getRowModel().rows?.length ? (\r\n              table.getRowModel().rows.map((row) => (\r\n                <TableRow key={row.id} data-state={row.getIsSelected() && \"selected\"}>\r\n                  {row.getVisibleCells().map((cell) => (\r\n                    <TableCell key={cell.id}>\r\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              ))\r\n            ) : (\r\n              <TableRow>\r\n                <TableCell colSpan={columns.length} className=\"h-24 text-center\">\r\n                  No results.\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n        <DataTablePagination table={table} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function ModelTableSkeleton() {\r\n  return (\r\n    <Card>\r\n      <Skeleton className=\"min-h-[400px] min-w-[320px] rounded-md\" />\r\n    </Card>\r\n  );\r\n}\r\nexport function ModelTableError({ error }: { error: Error }) {\r\n  return (\r\n    <Card className=\"flex w-full min-w-[320px] flex-col items-center justify-center px-3 py-4 text-center\">\r\n      <AlertTriangleIcon size={60} />\r\n      <CardHeader>\r\n        <CardTitle>\r\n          Ooops ðŸ¤¯ <br /> Something happened!\r\n        </CardTitle>\r\n        <CardDescription>\r\n          {error.message + \".\" || \"Something unexpected happened. Please check the logs\"}\r\n        </CardDescription>\r\n      </CardHeader>\r\n    </Card>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/ndx/data-table/data-table.tsx"
    },
    {
      "path": "component/ndx/data-table/data-table-column-header.tsx",
      "content": "import { Column } from \"@tanstack/react-table\"\r\nimport { ArrowDown, ArrowUp, ChevronsUpDown, EyeOff } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\"\r\n\r\ninterface DataTableColumnHeaderProps<TData, TValue>\r\n  extends React.HTMLAttributes<HTMLDivElement> {\r\n  column: Column<TData, TValue>\r\n  title: string\r\n}\r\n\r\nexport function DataTableColumnHeader<TData, TValue>({\r\n  column,\r\n  title,\r\n  className,\r\n}: DataTableColumnHeaderProps<TData, TValue>) {\r\n  if (!column.getCanSort()) {\r\n    return <div className={cn(className)}>{title}</div>\r\n  }\r\n\r\n  return (\r\n    <div className={cn(\"flex items-center space-x-2\", className)}>\r\n      <DropdownMenu>\r\n        <DropdownMenuTrigger asChild>\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            className=\"-ml-3 h-8 data-[state=open]:bg-accent\"\r\n          >\r\n            <span>{title}</span>\r\n            {column.getIsSorted() === \"desc\" ? (\r\n              <ArrowDown />\r\n            ) : column.getIsSorted() === \"asc\" ? (\r\n              <ArrowUp />\r\n            ) : (\r\n              <ChevronsUpDown />\r\n            )}\r\n          </Button>\r\n        </DropdownMenuTrigger>\r\n        <DropdownMenuContent align=\"start\">\r\n          <DropdownMenuItem onClick={() => column.toggleSorting(false)}>\r\n            <ArrowUp className=\"h-3.5 w-3.5 text-muted-foreground/70\" />\r\n            Asc\r\n          </DropdownMenuItem>\r\n          <DropdownMenuItem onClick={() => column.toggleSorting(true)}>\r\n            <ArrowDown className=\"h-3.5 w-3.5 text-muted-foreground/70\" />\r\n            Desc\r\n          </DropdownMenuItem>\r\n          <DropdownMenuSeparator />\r\n          <DropdownMenuItem onClick={() => column.toggleVisibility(false)}>\r\n            <EyeOff className=\"h-3.5 w-3.5 text-muted-foreground/70\" />\r\n            Hide\r\n          </DropdownMenuItem>\r\n        </DropdownMenuContent>\r\n      </DropdownMenu>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/ndx/data-table/data-table-column-header.tsx"
    },
    {
      "path": "component/ndx/data-table/data-table-facted-filter.tsx",
      "content": "import * as React from \"react\"\r\nimport { Column } from \"@tanstack/react-table\"\r\nimport { Check, PlusCircle } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport {\r\n  Command,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandInput,\r\n  CommandItem,\r\n  CommandList,\r\n  CommandSeparator,\r\n} from \"@/components/ui/command\"\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@/components/ui/popover\"\r\nimport { Separator } from \"@/components/ui/separator\"\r\n\r\ninterface DataTableFacetedFilterProps<TData, TValue> {\r\n  column?: Column<TData, TValue>\r\n  title?: string\r\n  options: {\r\n    label: string\r\n    value: string\r\n    icon?: React.ComponentType<{ className?: string }>\r\n  }[]\r\n}\r\n\r\nexport function DataTableFacetedFilter<TData, TValue>({\r\n  column,\r\n  title,\r\n  options,\r\n}: DataTableFacetedFilterProps<TData, TValue>) {\r\n  const facets = column?.getFacetedUniqueValues()\r\n  const selectedValues = new Set(column?.getFilterValue() as string[])\r\n\r\n  return (\r\n    <Popover>\r\n      <PopoverTrigger asChild>\r\n        <Button variant=\"outline\" size=\"sm\" className=\"h-8 border-dashed\">\r\n          <PlusCircle />\r\n          {title}\r\n          {selectedValues?.size > 0 && (\r\n            <>\r\n              <Separator orientation=\"vertical\" className=\"mx-2 h-4\" />\r\n              <Badge\r\n                variant=\"secondary\"\r\n                className=\"rounded-sm px-1 font-normal lg:hidden\"\r\n              >\r\n                {selectedValues.size}\r\n              </Badge>\r\n              <div className=\"hidden space-x-1 lg:flex\">\r\n                {selectedValues.size > 2 ? (\r\n                  <Badge\r\n                    variant=\"secondary\"\r\n                    className=\"rounded-sm px-1 font-normal\"\r\n                  >\r\n                    {selectedValues.size} selected\r\n                  </Badge>\r\n                ) : (\r\n                  options\r\n                    .filter((option) => selectedValues.has(option.value))\r\n                    .map((option) => (\r\n                      <Badge\r\n                        variant=\"secondary\"\r\n                        key={option.value}\r\n                        className=\"rounded-sm px-1 font-normal\"\r\n                      >\r\n                        {option.label}\r\n                      </Badge>\r\n                    ))\r\n                )}\r\n              </div>\r\n            </>\r\n          )}\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent className=\"w-[200px] p-0\" align=\"start\">\r\n        <Command>\r\n          <CommandInput placeholder={title} />\r\n          <CommandList>\r\n            <CommandEmpty>No results found.</CommandEmpty>\r\n            <CommandGroup>\r\n              {options.map((option) => {\r\n                const isSelected = selectedValues.has(option.value)\r\n                return (\r\n                  <CommandItem\r\n                    key={option.value}\r\n                    onSelect={() => {\r\n                      if (isSelected) {\r\n                        selectedValues.delete(option.value)\r\n                      } else {\r\n                        selectedValues.add(option.value)\r\n                      }\r\n                      const filterValues = Array.from(selectedValues)\r\n                      column?.setFilterValue(\r\n                        filterValues.length ? filterValues : undefined\r\n                      )\r\n                    }}\r\n                  >\r\n                    <div\r\n                      className={cn(\r\n                        \"mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary\",\r\n                        isSelected\r\n                          ? \"bg-primary text-primary-foreground\"\r\n                          : \"opacity-50 [&_svg]:invisible\"\r\n                      )}\r\n                    >\r\n                      <Check />\r\n                    </div>\r\n                    {option.icon && (\r\n                      <option.icon className=\"mr-2 h-4 w-4 text-muted-foreground\" />\r\n                    )}\r\n                    <span>{option.label}</span>\r\n                    {facets?.get(option.value) && (\r\n                      <span className=\"ml-auto flex h-4 w-4 items-center justify-center font-mono text-xs\">\r\n                        {facets.get(option.value)}\r\n                      </span>\r\n                    )}\r\n                  </CommandItem>\r\n                )\r\n              })}\r\n            </CommandGroup>\r\n            {selectedValues.size > 0 && (\r\n              <>\r\n                <CommandSeparator />\r\n                <CommandGroup>\r\n                  <CommandItem\r\n                    onSelect={() => column?.setFilterValue(undefined)}\r\n                    className=\"justify-center text-center\"\r\n                  >\r\n                    Clear filters\r\n                  </CommandItem>\r\n                </CommandGroup>\r\n              </>\r\n            )}\r\n          </CommandList>\r\n        </Command>\r\n      </PopoverContent>\r\n    </Popover>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/ndx/data-table/data-table-facted-filter.tsx"
    },
    {
      "path": "component/ndx/data-table/data-table-pagination.tsx",
      "content": "import { Table } from \"@tanstack/react-table\"\r\nimport {\r\n  ChevronLeft,\r\n  ChevronRight,\r\n  ChevronsLeft,\r\n  ChevronsRight,\r\n} from \"lucide-react\"\r\n\r\nimport { Button } from \"@/components/ui/button\"\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\"\r\n\r\ninterface DataTablePaginationProps<TData> {\r\n  table: Table<TData>\r\n}\r\n\r\nexport function DataTablePagination<TData>({\r\n  table,\r\n}: DataTablePaginationProps<TData>) {\r\n  return (\r\n    <div className=\"flex items-center justify-between px-2\">\r\n      <div className=\"flex-1 text-sm text-muted-foreground\">\r\n        {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\r\n        {table.getFilteredRowModel().rows.length} row(s) selected.\r\n      </div>\r\n      <div className=\"flex items-center space-x-6 lg:space-x-8\">\r\n        <div className=\"flex items-center space-x-2\">\r\n          <p className=\"text-sm font-medium\">Rows per page</p>\r\n          <Select\r\n            value={`${table.getState().pagination.pageSize}`}\r\n            onValueChange={(value) => {\r\n              table.setPageSize(Number(value))\r\n            }}\r\n          >\r\n            <SelectTrigger className=\"h-8 w-[70px]\">\r\n              <SelectValue placeholder={table.getState().pagination.pageSize} />\r\n            </SelectTrigger>\r\n            <SelectContent side=\"top\">\r\n              {[5, 10, 15, 20, 30, 40, 50].map((pageSize) => (\r\n                <SelectItem key={pageSize} value={`${pageSize}`}>\r\n                  {pageSize}\r\n                </SelectItem>\r\n              ))}\r\n            </SelectContent>\r\n          </Select>\r\n        </div>\r\n        <div className=\"flex w-[100px] items-center justify-center text-sm font-medium\">\r\n          Page {table.getState().pagination.pageIndex + 1} of{\" \"}\r\n          {table.getPageCount()}\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <Button\r\n            variant=\"outline\"\r\n            className=\"hidden h-8 w-8 p-0 lg:flex\"\r\n            onClick={() => table.setPageIndex(0)}\r\n            disabled={!table.getCanPreviousPage()}\r\n          >\r\n            <span className=\"sr-only\">Go to first page</span>\r\n            <ChevronsLeft />\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            className=\"h-8 w-8 p-0\"\r\n            onClick={() => table.previousPage()}\r\n            disabled={!table.getCanPreviousPage()}\r\n          >\r\n            <span className=\"sr-only\">Go to previous page</span>\r\n            <ChevronLeft />\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            className=\"h-8 w-8 p-0\"\r\n            onClick={() => table.nextPage()}\r\n            disabled={!table.getCanNextPage()}\r\n          >\r\n            <span className=\"sr-only\">Go to next page</span>\r\n            <ChevronRight />\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            className=\"hidden h-8 w-8 p-0 lg:flex\"\r\n            onClick={() => table.setPageIndex(table.getPageCount() - 1)}\r\n            disabled={!table.getCanNextPage()}\r\n          >\r\n            <span className=\"sr-only\">Go to last page</span>\r\n            <ChevronsRight />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/ndx/data-table/data-table-pagination.tsx"
    },
    {
      "path": "component/ndx/data-table/data-table-row-actions.tsx",
      "content": "\"use client\";\r\n\r\nimport Link from \"next/link\";\r\nimport { useRouter } from \"next/navigation\";\r\n\r\nimport { Row } from \"@tanstack/react-table\";\r\nimport { MoreHorizontal } from \"lucide-react\";\r\nimport { toast } from \"sonner\";\r\nimport { z, ZodSchema } from \"zod\";\r\n\r\nimport { Button, buttonVariants } from \"@/components/ui/button\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuRadioGroup,\r\n  DropdownMenuRadioItem,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\nimport { Statuses } from \"./data-table-columns-example\";\r\n\r\ninterface DataTableRowActionsProps<TData> {\r\n  row: Row<TData>;\r\n  // table: DatabaseTables\r\n  table?: \"application\";\r\n  schema?: ZodSchema<any>;\r\n}\r\n\r\nexport function DataTableRowActions<TData>({\r\n  row,\r\n  table,\r\n  schema,\r\n}: DataTableRowActionsProps<TData>) {\r\n  const rowData = row.original;\r\n  const router = useRouter();\r\n  // const application = ValidateApplication(rowData, table)\r\n  console.log(\"Tables: \", table);\r\n  // Mutation query\r\n  // const { mutate } = useUpdateApplication<z.infer<typeof schema>>()\r\n\r\n  function handleStatusChange(newStatus: string) {\r\n    // if (!application) return;\r\n    toast.promise(\r\n      async () => {\r\n        // if (!application?.app?.id) {\r\n        //   throw new Error(\"Application ID is missing\");\r\n        // }\r\n        // mutate({\r\n        //   id: application.app.id.toString(),\r\n        //   newStatus: newStatus,\r\n        //   tableName: table,\r\n        // })\r\n      },\r\n      {\r\n        loading: \"Updating application's status\",\r\n        success: (res) => {\r\n          console.log(\"Response: \", res);\r\n          location.reload();\r\n          return \"Status successfully updated!\";\r\n        },\r\n        error: (error: Error) => {\r\n          console.log(\"Error: \", error);\r\n          return error.message || \"Oops ðŸ¤¯ An unexpected error ocurred!\";\r\n        },\r\n      }\r\n    );\r\n  }\r\n\r\n  return (\r\n    <DropdownMenu>\r\n      <DropdownMenuTrigger asChild>\r\n        <Button variant=\"ghost\" className=\"flex h-8 w-8 p-0 data-[state=open]:bg-muted\">\r\n          <MoreHorizontal />\r\n          <span className=\"sr-only\">Open menu</span>\r\n        </Button>\r\n      </DropdownMenuTrigger>\r\n      <DropdownMenuContent align=\"end\" className=\"w-[160px]\">\r\n        <DropdownMenuRadioGroup>\r\n          {Statuses.map((label) => (\r\n            <DropdownMenuRadioItem\r\n              key={label.value}\r\n              value={label.value}\r\n              onClick={() => handleStatusChange(label.value)}\r\n            >\r\n              {label.label}\r\n            </DropdownMenuRadioItem>\r\n          ))}\r\n        </DropdownMenuRadioGroup>\r\n      </DropdownMenuContent>\r\n    </DropdownMenu>\r\n  );\r\n}\r\n\r\n// export function DataTableRowPayAction<TData>({\r\n//   row,\r\n//   table,\r\n//   schema,\r\n// }: DataTableRowActionsProps<TData>) {\r\n//   const rowData = row.original\r\n//   const application = ValidateApplication(rowData, table)\r\n//   // console.log(\"Tables: \", table)\r\n\r\n//   return (\r\n//     <Link\r\n//       className={buttonVariants({})}\r\n//       href={`${siteMapData.Dashboard.children.Payment.path}?table=${table}&application=${application?.app.id}`}\r\n//     >\r\n//       Pay Now\r\n//     </Link>\r\n//   )\r\n// }\r\n\r\n// type availbleApplications =\r\n//   | BursaryApplication\r\n//   | DriversLicenseApplication\r\n//   | PassportApplication\r\n//   | VaccinationApplication\r\n// interface ValidateApplicationResponse {\r\n//   app: availbleApplications\r\n//   tableName: DatabaseTables\r\n// }\r\n// function ValidateApplication(\r\n//   application: any,\r\n//   table: DatabaseTables\r\n// ): ValidateApplicationResponse | undefined {\r\n//   if (table == \"bursary_applications\") {\r\n//     const {\r\n//       data: bursaryApplication,\r\n//       error: bursaryError,\r\n//       success,\r\n//     } = BursaryApplicationSchema.safeParse(application)\r\n//     if (success) {\r\n//       console.log(\"Bursary \", bursaryApplication)\r\n//       return {\r\n//         app: bursaryApplication,\r\n//         tableName: \"bursary_applications\",\r\n//       }\r\n//     }\r\n//   }\r\n//   if (table === \"drivers_license_applications\") {\r\n//     const {\r\n//       data: driversApplication,\r\n//       error: driversError,\r\n//       success,\r\n//     } = DriversLicenseSchema.safeParse(application)\r\n//     if (success) {\r\n//       console.log(\"Drivers \", driversApplication)\r\n//       return {\r\n//         app: driversApplication,\r\n//         tableName: \"drivers_license_applications\",\r\n//       }\r\n//     }\r\n//   }\r\n//   if (table === \"passport_applications\") {\r\n//     const {\r\n//       data: passportApplication,\r\n//       error: passportError,\r\n//       success,\r\n//     } = PassportApplicationSchema.safeParse(application)\r\n//     console.log(\"Passport: \", passportError)\r\n//     if (success) {\r\n//       console.log(\"Passport \", passportApplication)\r\n//       return {\r\n//         app: passportApplication,\r\n//         tableName: \"passport_applications\",\r\n//       }\r\n//     }\r\n//   }\r\n//   if (table === \"vaccination_applications\") {\r\n//     const {\r\n//       data: vaccinationApplication,\r\n//       error: vaccinationError,\r\n//       success,\r\n//     } = VaccinationApplicationSchema.safeParse(application)\r\n//     if (success) {\r\n//       console.log(\"Vaccination: \", vaccinationApplication)\r\n//       return {\r\n//         app: vaccinationApplication,\r\n//         tableName: \"vaccination_applications\",\r\n//       }\r\n//     }\r\n//   }\r\n// }\r\n",
      "type": "registry:component",
      "target": "components/ndx/data-table/data-table-row-actions.tsx"
    },
    {
      "path": "component/ndx/data-table/data-table-tool-bar.tsx",
      "content": "\"use client\";\r\n\r\nimport { Table } from \"@tanstack/react-table\";\r\nimport { X } from \"lucide-react\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\n\r\nimport { DataTableFacetedFilter } from \"./data-table-facted-filter\";\r\nimport { DataTableViewOptions } from \"./data-table-view-toggle\";\r\nimport { Statuses } from \"./data-table-columns-example\";\r\n\r\n/**\r\n * Props for the `DataTableToolbar` component.\r\n * @template TData - The type of data in the table.\r\n * @param {Table<TData>} table - The TanStack Table instance.\r\n * @param {string} [searchColumn] - The name of the column to search.  If not provided, no search bar is rendered.\r\n * @param {Array<{ column: string; title: string; options: Array<{ label: string; value: string }> }>} [filters] - An array of filter objects. Each object defines a filter with a column name, title, and an array of options. If not provided, no filters are rendered.\r\n */\r\ninterface DataTableToolbarProps<TData> {\r\n  table: Table<TData>;\r\n  searchColumn?: string;\r\n  filters?: Filter[];\r\n}\r\n\r\nexport interface Filter {\r\n  column: string;\r\n  title: string;\r\n  options: Array<{ label: string; value: string }>;\r\n}\r\n\r\nexport function DataTableToolbar<TData>({\r\n  table,\r\n  searchColumn,\r\n  filters,\r\n}: DataTableToolbarProps<TData>) {\r\n  const isFiltered = table.getState().columnFilters.length > 0;\r\n\r\n  return (\r\n    <div className=\"flex items-center justify-between\">\r\n      <div className=\"flex flex-1 items-center space-x-2\">\r\n        {searchColumn && (\r\n          <Input\r\n            placeholder={`Search ${searchColumn} ...`}\r\n            value={(table.getColumn(\"name\")?.getFilterValue() as string) ?? \"\"}\r\n            onChange={(event) => table.getColumn(searchColumn)?.setFilterValue(event.target.value)}\r\n            className=\"h-8 w-[150px] lg:w-[250px]\"\r\n          />\r\n        )}\r\n\r\n        {/* Render out Provided filters */}\r\n        {filters &&\r\n          filters.map(\r\n            (filter) =>\r\n              table.getColumn(filter.column) && (\r\n                <DataTableFacetedFilter\r\n                  column={table.getColumn(filter.column)}\r\n                  title={filter.title}\r\n                  options={filter.options}\r\n                />\r\n              )\r\n          )}\r\n\r\n        {isFiltered && (\r\n          <Button\r\n            variant=\"ghost\"\r\n            onClick={() => table.resetColumnFilters()}\r\n            className=\"h-8 px-2 lg:px-3\"\r\n          >\r\n            Reset\r\n            <X />\r\n          </Button>\r\n        )}\r\n      </div>\r\n      <DataTableViewOptions table={table} />\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/ndx/data-table/data-table-tool-bar.tsx"
    },
    {
      "path": "component/ndx/data-table/data-table-view-toggle.tsx",
      "content": "\"use client\"\r\n\r\nimport { DropdownMenuTrigger } from \"@radix-ui/react-dropdown-menu\"\r\nimport { Table } from \"@tanstack/react-table\"\r\nimport { Settings2 } from \"lucide-react\"\r\n\r\nimport { Button } from \"@/components/ui/button\"\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuCheckboxItem,\r\n  DropdownMenuContent,\r\n  DropdownMenuLabel,\r\n  DropdownMenuSeparator,\r\n} from \"@/components/ui/dropdown-menu\"\r\n\r\ninterface DataTableViewOptionsProps<TData> {\r\n  table: Table<TData>\r\n}\r\n\r\nexport function DataTableViewOptions<TData>({\r\n  table,\r\n}: DataTableViewOptionsProps<TData>) {\r\n  return (\r\n    <DropdownMenu>\r\n      <DropdownMenuTrigger asChild>\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          className=\"ml-auto hidden h-8 lg:flex\"\r\n        >\r\n          <Settings2 />\r\n          View\r\n        </Button>\r\n      </DropdownMenuTrigger>\r\n      <DropdownMenuContent align=\"end\" className=\"w-full\">\r\n        <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>\r\n        <DropdownMenuSeparator />\r\n        {table\r\n          .getAllColumns()\r\n          .filter(\r\n            (column) =>\r\n              typeof column.accessorFn !== \"undefined\" && column.getCanHide()\r\n          )\r\n          .map((column) => {\r\n            return (\r\n              <DropdownMenuCheckboxItem\r\n                key={column.id}\r\n                className=\"capitalize\"\r\n                checked={column.getIsVisible()}\r\n                onCheckedChange={(value) => column.toggleVisibility(!!value)}\r\n              >\r\n                {column.id}\r\n              </DropdownMenuCheckboxItem>\r\n            )\r\n          })}\r\n      </DropdownMenuContent>\r\n    </DropdownMenu>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/ndx/data-table/data-table-view-toggle.tsx"
    },
    {
      "path": "component/ndx/data-table/data-table-columns-example.tsx",
      "content": "\"use client\";\r\n\r\nimport Link from \"next/link\";\r\nimport { ColumnDef } from \"@tanstack/react-table\";\r\nimport {\r\n  ArrowDown,\r\n  ArrowRight,\r\n  ArrowUp,\r\n  CheckCircle,\r\n  CheckIcon,\r\n  Circle,\r\n  CircleOff,\r\n  DownloadCloudIcon,\r\n  HelpCircle,\r\n  Timer,\r\n  XCircleIcon,\r\n} from \"lucide-react\";\r\n\r\nimport { DataTableColumnHeader } from \"@/registry/component/ndx/data-table/data-table-column-header\";\r\nimport { DataTableRowActions } from \"@/registry/component/ndx/data-table/data-table-row-actions\";\r\n\r\nexport enum Status {\r\n  InProgress = \"In Progress\",\r\n  Validating = \"Validating\",\r\n  Approved = \"Approved\",\r\n  Rejected = \"Rejected\",\r\n}\r\n\r\nexport interface UserEntity {\r\n  name: string;\r\n  surname: string;\r\n  gender: string;\r\n  email: string;\r\n  date_of_birth: string;\r\n  phone_number: string;\r\n  status: string;\r\n  created_at: string;\r\n}\r\n\r\nexport const UserColumns: ColumnDef<UserEntity>[] = [\r\n  {\r\n    accessorKey: \"name\",\r\n    header: ({ column }) => <DataTableColumnHeader column={column} title=\"Name\" />,\r\n  },\r\n  {\r\n    accessorKey: \"surname\",\r\n    header: ({ column }) => <DataTableColumnHeader column={column} title=\"Surname\" />,\r\n  },\r\n  {\r\n    accessorKey: \"gender\",\r\n    header: ({ column }) => <DataTableColumnHeader column={column} title=\"Gender\" />,\r\n  },\r\n  {\r\n    accessorKey: \"email\",\r\n    header: ({ column }) => <DataTableColumnHeader column={column} title=\"Email\" />,\r\n  },\r\n  {\r\n    accessorKey: \"date_of_birth\",\r\n    header: ({ column }) => <DataTableColumnHeader column={column} title=\"DoB\" />,\r\n    cell: ({ row }) => {\r\n      return FormatDateRow(row.getValue(\"created_at\"));\r\n    },\r\n  },\r\n  {\r\n    accessorKey: \"phone_number\",\r\n    header: \"Phone\",\r\n  },\r\n  {\r\n    accessorKey: \"status\",\r\n    header: ({ column }) => <DataTableColumnHeader column={column} title=\"Status\" />,\r\n    cell: ({ row }) => {\r\n      return FormatStatusRow(row.getValue(\"status\"));\r\n    },\r\n    filterFn: (row, id, value) => {\r\n      return value.includes(row.getValue(id));\r\n    },\r\n  },\r\n\r\n  {\r\n    accessorKey: \"created_at\",\r\n    header: ({ column }) => <DataTableColumnHeader column={column} title=\"Applied at\" />,\r\n    cell: ({ row }) => {\r\n      return FormatDateRow(row.getValue(\"created_at\"));\r\n    },\r\n  },\r\n  {\r\n    id: \"actions\",\r\n    header: \"Actions\",\r\n    cell: ({ row }) => (\r\n      <DataTableRowActions\r\n        // table=\"b`ursary_applications\"\r\n        row={row}\r\n      />\r\n    ),\r\n  },\r\n];\r\n\r\n// Templated Values for a Status field\r\n// This should be a forced Enum on the field, which is also enforced in the backend\r\nexport const Statuses: { value: Status; label: string; icon: any }[] = [\r\n  {\r\n    value: Status.Validating,\r\n    label: \"Validating\",\r\n    icon: Circle,\r\n  },\r\n  {\r\n    value: Status.InProgress,\r\n    label: \"In Progress\",\r\n    icon: Timer,\r\n  },\r\n  {\r\n    value: Status.Approved,\r\n    label: \"Approved\",\r\n    icon: CheckCircle,\r\n  },\r\n  {\r\n    value: Status.Rejected,\r\n    label: \"Rejected\",\r\n    icon: CircleOff,\r\n  },\r\n];\r\n\r\n// Formats a DateTime field\r\nexport function FormatDateRow(value: unknown) {\r\n  const date = new Date(value as string);\r\n  return date.toLocaleDateString();\r\n}\r\n\r\n// Handles Displaying Download link for a document/image Row\r\nexport function VerifyDocumentIsUploaded(document: unknown) {\r\n  return (\r\n    <div className=\"flex items-center justify-center\">\r\n      {document === null && <XCircleIcon className=\"hover text-destructive\" />}\r\n      {typeof document === \"string\" && (\r\n        <Link href={document}>\r\n          <DownloadCloudIcon className=\"text-green-400\" />\r\n        </Link>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Formats and shows Respective Icon/colour for a Status row\r\nexport function FormatStatusRow(value: unknown) {\r\n  const status = Statuses.find((status) => status.value === value);\r\n\r\n  if (!status) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex w-[100px] items-center\">\r\n      {status.icon && <status.icon className=\"mr-2 h-4 w-4 text-muted-foreground\" />}\r\n      <span>{status.label}</span>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/ndx/data-table/data-table-columns-example.tsx"
    }
  ]
}